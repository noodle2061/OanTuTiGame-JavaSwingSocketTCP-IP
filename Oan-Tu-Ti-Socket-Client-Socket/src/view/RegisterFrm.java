/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package view;

import controller.Client;
import helper.ImageHandle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author vankh
 */
public class RegisterFrm extends javax.swing.JFrame {

    /**
     * Creates new form RegisterFrm
     */
    private String encodeImg;
    private int imgSize = 100;

    public void notify(String er) {
        JOptionPane.showMessageDialog(this, er, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    }

    public RegisterFrm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        userName = new javax.swing.JTextField();
        passwordValue = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        registerButton = new javax.swing.JButton();
        turnBackLoginBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        password2Value = new javax.swing.JPasswordField();
        chooseImg = new javax.swing.JButton();
        avatarImg = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setText("Nhập tên:");

        jLabel2.setText("Nhập password:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Đăng Ký");

        registerButton.setText("Đăng ký");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        turnBackLoginBtn.setText("Đăng nhập");
        turnBackLoginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnBackLoginBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Nhập lại password:");

        password2Value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                password2ValueActionPerformed(evt);
            }
        });

        chooseImg.setText("Chọn ảnh đại diện");
        chooseImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseImgActionPerformed(evt);
            }
        });

        //ImageIcon icon = new ImageIcon("C:\\Users\\vankh\\Downloads\\Page 4.jpg");
        avatarImg.setBackground(new java.awt.Color(153, 255, 153));
        avatarImg = new javax.swing.JLabel();
        avatarImg.setBackground(new java.awt.Color(153, 255, 153));

        try {
            BufferedImage image = ImageIO.read(new File("src/image/avatar.jpg"));
            image = ImageHandle.resizeImage(image, imgSize, imgSize);
            ImageIcon resizedIcon = new ImageIcon(image);
            avatarImg.setIcon(resizedIcon);
        } catch (Exception e) {
            System.out.print(e);
        }

        //System.out.print(ImageHandle.imageToString(resizedIcon.getImage(), "jpg"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(136, 136, 136))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(chooseImg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                                .addComponent(avatarImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(userName)
                                    .addComponent(passwordValue, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                                    .addComponent(password2Value))))
                        .addGap(58, 58, 58))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(turnBackLoginBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel3)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(passwordValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(password2Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(chooseImg))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(avatarImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerButton)
                    .addComponent(turnBackLoginBtn))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        // TODO add your handling code here:
        String name = userName.getText();
        String pass = String.copyValueOf(passwordValue.getPassword());
        String pass2 = String.copyValueOf(password2Value.getPassword());

        if (!pass.equals(pass2)) {
            notify("Mật khẩu nhập không khớp!");
            return;
        }
        if (encodeImg == null) {
            try {
                BufferedImage image = ImageIO.read(new File("src/image/avatar.jpg"));
                encodeImg = ImageHandle.imageToString(image, "jpg");
            } catch (IOException ex) {
                Logger.getLogger(RegisterFrm.class.getName()).log(Level.SEVERE, null, ex);
            }
//            encodeImg = ImageHandle.imageToString(resizedIcon.getImage(), "jpg");
        }
        if (name.equals("")) {
            notify("Hãy nhập tên vào!!!");
        } else if (pass.equals("")) {
            notify("Hãy nhập mật khẩu vào!!!");
        } else {
//            System.out.println(encodeImg.length());
            Client.socketHandle.write("register-request;" + name + ";" + pass + ";" + encodeImg);
        }
    }//GEN-LAST:event_registerButtonActionPerformed

    private void turnBackLoginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnBackLoginBtnActionPerformed
        // TODO add your handling code here:
        Client.CloseView(Client.View.REGISTER);
        Client.OpenView(Client.View.LOGIN);
    }//GEN-LAST:event_turnBackLoginBtnActionPerformed

    private void password2ValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_password2ValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_password2ValueActionPerformed

    private void chooseImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseImgActionPerformed
        // TODO add your handling code here:
        // Tạo đối tượng JFileChooser để mở hộp thoại chọn file
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn ảnh đại diện");
        String fileNameExtension;

        // Chỉ cho phép chọn file
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // Bộ lọc chỉ cho phép chọn các định dạng ảnh
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "png"));

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            // Kiểm tra xem tệp được chọn có phải là ảnh hay không
            String fileName = selectedFile.getName().toLowerCase();
            System.out.println(selectedFile);

            if (fileName.endsWith(".jpg")) {
                fileNameExtension = "jpg";
            } else if (fileName.endsWith(".png")) {
                fileNameExtension = "png";
            } else if (fileName.endsWith(".jpeg")) {
                fileNameExtension = "jpeg";
            } else {
                notify("Tệp được chọn không phải là định dạng ảnh hợp lệ.\n Hãy chọn ảnh có định dạng jpg, png, jpeg");
                return;
            }

            // Kiểm tra kích thước tệp (ví dụ: không quá 2MB)
            long fileSizeInMB = selectedFile.length() / (1024 * 1024);
            if (fileSizeInMB > 2) {
                notify("Kích thước tệp quá lớn. Vui lòng chọn tệp nhỏ hơn 2MB.");
                return;
            }
           

            // Nếu tệp đạt yêu cầu, tiến hành chỉnh kích thước ảnh
            try {
                BufferedImage originalImage = ImageIO.read(selectedFile);
//                encodeImg = ImageHandle.imageToString(originalImage, fileNameExtension);
                
                encodeImg = ImageHandle.resizeImageAndConvertToString(originalImage, 200, 200, fileNameExtension);
                System.out.println(encodeImg);
                // Tạo ImageIcon từ ảnh đã chỉnh kích thước
                originalImage = ImageHandle.resizeImage(originalImage, imgSize, imgSize);
                ImageIcon icon = new ImageIcon(originalImage);
                // Đặt icon đã chỉnh kích thước làm icon cho JTextField có tên "avatarImg"
                avatarImg.setIcon(icon);

            } catch (IOException ex) {
                notify("Đã xảy ra lỗi khi tải ảnh.");
            }
        }
    }//GEN-LAST:event_chooseImgActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegisterFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegisterFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegisterFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegisterFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegisterFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel avatarImg;
    private javax.swing.JButton chooseImg;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPasswordField password2Value;
    private javax.swing.JPasswordField passwordValue;
    private javax.swing.JButton registerButton;
    private javax.swing.JButton turnBackLoginBtn;
    private javax.swing.JTextField userName;
    // End of variables declaration//GEN-END:variables

}
